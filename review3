3일차

3-1. 조건문

if / else
if (cond) {
# cond가 참일 때 실행할 문장
} else {
# cond가 거짓일 때 실행할 문장
}

if / else if / else
if(조건1) {
  # 조건1이 참일 때 실행할 문장
} else if (조건2) {
  # 조건1이 참이 아니고 조건2가 참일 때 실행할 문장
} else {
  # 조건1, 2가 모두 참이 아닐 때 실행할 문장
}

ifelse (조건,참,거짓)
x <- c(1, 2, 3, 4, 5)
ifelse(x %% 2 == 0, "even", "odd")

x <- c(1,2,3,4)
y <- c(2,1,3,5)
ifelse(x<y, x, y)
ifelse(sum(x-y) > 0, "positive", ifelse(sum(x-y) < 0 , "negative", "zero"))
 
3-2. 루프문

expand.grid : n개(2개이상)의 벡터에 있는 요소에 대해 모든 조합을 리스트로 만들어줌
두 주사위의 모든 조합
die <- 1:6                                  # die는 numeric 변수
rolls <- expand.grid(die, die)              # rolls는 list 변수
rolls$value <- rolls$Var1 + rolls$Var2      # 모든 합의 조합을 value 컬럼에 저장

확률 N의 독립적인 랜덤 사건의 발생은 각 임의의 사건이 발생하는 확률의 곱과 같다.
prob <- c("1" = 1/8, "2" = 1/8, "3" = 1/8, "4" = 1/8, "5" = 1/8, "6" = 3/8)
rolls$prob1 <- prob[rolls$Var1]
rolls$prob2 <- prob[rolls$Var2]
rolls$prob <- rolls$prob1 * rolls$prob2

주사위의 예상 기대값 -> 8.25
sum(rolls$value * rolls$prob)

for 루프
for (value in c("My", "first", "for", "loop")) {
  print("one run")
}	 
for (value in c("My", "second", "for", "loop")) {
  print(value)
}	 
for (value in c("My", "third", "for", "loop")) {
  value
}	 
for문을 돌면서 값을 적재만 하므로 마지막 적재값인 loop만 출력됨

chars <- rep(0,4)
words <- c("My", "fourth", "for", "loop")
for (i in 1:4) {
  chars[i] <- words[i]}	 
roll2$new <- NA
for (i in 1:nrow(roll2)) {
  symbols <- sum(roll2[i, 4], roll2[i, 5], roll2[i, 6])
  roll2$new[i] <- symbols
}	 

while 루프
i <- 1
while (i < 6) {
  print(i)
  i = i+1}	 
z <- 0
i <- 1
while( i <= 10) {
  z = z + i
  cat("cummulative summation up to", i, "is", z, "\n") 
  i = i + 1}	 

repeat 루프
k <- 1
repeat {
  k <- k+3
  if (k > 5) break}	 

함수 만들기
1. 함수 생성 및 실행하기 
myfunction <- function(){
  print("Hi Hello")}	 
  
2. 인수 값 전달 함수 
make_sum <- function(x,y){
  x+y}	 
  
3. 기본 값 지정하기
pp <- function(x,y=6){
  x^y}	 
  
4. 특정 값 return 
make_sum <- function(x,y){
  return(x+y)}	 
  
5. 계산값을 각 변수로 리턴
dt <- function(x,y){
  add <- x+y
  mul <- x*y
c(a1 = add, a2 = mul)
}	 

6.  인수의 개수가 가변적인 상황
my_function <- function(x,...){
  print(x)
  print(summary(...))
}
z1<-1:20
z2<-51:70	 

3-3. apply문
apply( ) : 배열 또는 행렬에 주어진 함수를 적용한 뒤 그 결과를 벡터, 배열 또는 리스트로 반환
apply(
  X,            # 배열 또는 행렬
  MARGIN,       # 1은 행 방향, 2는 열 방향, c(1, 2)는 행과 열 방향 모두를 의미
  FUN           # 적용할 함수
)

d <- matrix(1:9, ncol=3)
apply(d, 1, sum)
apply(d, 2, sum)	 
apply(iris[, 1:4], 2, sum)	 
rowSums(iris[, 1:4])
colSums(iris[, 1:4])	rowSums(x, na.rm=FALSE)
colSums(x, na.rm=FALSE)  
NA값 제외하고 계산할지 여부 na.rm으로 지정


lapply( ) : 벡터, 리스트 또는 표현식에 함수를 적용하여 그 결과를 X와 같은 길이의 리스트로 반환
lapply(
  X,               # 벡터, 리스트, 표현식 또는 데이터 프레임
  FUN,             # 적용할 함수
  ...              # 추가 인자. 이 인자들은 FUN에 전달
)
result <- lapply(1:3, function(x) { x*2 })
unlist(result)	   
list를 인자로 받을 수 있다.

x <- list(a=1:3, b=4:6)
lapply(x, mean)	   
data.frame를 인자로 받을 수 있다.

lapply(iris[, 1:4], mean)
unlist(iris_mean)	   

unlist : 리스트 구조를 벡터로 반환한다.
unlist(
  x,                            # R 객체. 보통 리스트 또는 벡터
  recursive=FALSE,              # x에 포함된 리스트 역시 재귀적으로 변환할지 여부
  use.names=TRUE                # 리스트 내 값의 이름을 보존할지 여부
)
do.call : 함수를 리스트에 주어진 인자에 적용하여 결과를 반환한다.
do.call(
  what,                         # 호출할 함수
  args,                         # 함수에 전달할 인자의 리스트
)

unlist로 백터 변환 후 데이터프레임 만들기
d <- data.frame (matrix(unlist(lapply(iris[, 1:4], mean)),
ncol=4, byrow=TRUE))
names(d) <- names(iris[, 1:4])	 
data.frame(do.call(cbind, lapply(iris[, 1:4], mean)))	위랑 같은 값
do.call을 활용한 데이터 프레임 만들기 
f<-data.frame(do.call(rbind, lapply(iris[, 1:4], mean)))
names(f)<-"mean"	 

sapply( ) : lapply와 유사하지만 결과를 벡터, 행렬 또는 배열로 반환
(FUN 결과가 길이 1인 벡터들이면 벡터로, 1보다 큰 벡터들이면 행렬로 반환됨)
sapply(
  X,          # 벡터, 리스트, 표현식 또는 데이터 프레임
  FUN,      # 적용할 함수
  ...,          # 추가 인자. 이 인자들은 FUN에 전달된다.
)

lapply(iris[, 1:4], mean)	 
sapply(iris[, 1:4], mean)
class(sapply(iris[, 1:4], mean)) -> numeric	 
sapply( )에서 반환한 벡터는 as.data.frame( )을 사용해 데이터 프레임으로 반환

x <- sapply(iris[, 1:4], mean)
as.data.frame(x)
as.data.frame(t(x))	 
sapply( )에 인자로 주어진 함수의 출력이 길이가 1보다 큰 벡터들이라면 sapply( )는 행렬을 반환	 

참고 : 변수 구조 확인하고 싶을 때
sapply(iris, class)
str(iris)	 

tapply( ) : 벡터에 있는 데이터를 특정 기준에 따라 그룹으로 묶은 뒤 각 그룹마다 주어진 함수를 적용하고 그 결과를 배열로 반환
tapply(
  X,           # 벡터
  INDEX,       # 데이터를 묶을 색인. factor 형태여야 하며 type이 지정되면 factor로 형 변환된다. 
  FUN,         # 각 그룹마다 적용할 함수
  ...,         # 추가 인자. 이 인자들은 FUN에 전달된다.
)

1~10까지의 숫자가 한 그룹에 속해 있을 때, 이 그룹에 속한 데이터의 합
tapply(1:10, rep(1, 10), sum)	 
홀수 짝수로 그룹 구분
tapply(1:10, 1:10 %% 2 == 1, sum)	 
tapply(iris$Sepal.Length, iris$Species, mean)	 

mapply( ) : sapply의 확장된 버전으로, 여러 개의 벡터 또는 리스트를 인자로 받아 함수에 각 데이터의 첫째 요소들을 적용한 결과, 둘째 요소들을 적용한 결과, 셋째 요소들을 적용한 결과 등을 반환 (sapply( )와 유사하지만 다수의 인자를 함수에 넘긴다는 점에서 차이)
mapply(
  FUN,  # 실행할 함수
  ...,  # 적용할 인자
)

rnorm(10, 0, 1)	 
mapply(rnorm,
       c(1, 2, 3),
       c(0, 10, 100),
       c(1, 1, 1))   	     rnorm(n, mean, sd)
mapply(mean, iris[, 1:4])	 
