5일차

# dplyr 복습하기
install.packages("hflights")
library(hflights)
data("hflights")

# 미국 휴스턴에서 출발하는 모든 비행기의 2011년 이착륙기록(227,496건)
head(hflights)
filter(hflights, Month == 1, DayofMonth == 20)
arrange(hflights, ArrDelay, Month, Year)

# 연습문제
# 문제1
mutate를 사용해 delay라는 변수를 만들고 오름차순으로 정렬후 상위 20개의 평균을 구하시오
hflights %>% 
  mutate(delay = ArrDelay - DepDelay) %>% 
  arrange(delay) %>% 
  head(20) %>% 
  summarise(mean = mean(delay))

hflights %>% 
  mutate(delay = ArrDelay - DepDelay) %>% 
  arrange(delay) %>%
  slice_head(n=20) %>% 
summarise(mean = mean(delay))

# [참고] slice 함수
# slice_head() and slice_tail() select the first or last rows.
# slice_sample() randomly selects rows.
# slice_min() and slice_max() select rows with highest or lowest values of a variable.
# 데이터가 그룹으로 묶여있으면 각 그룹의 상위 n개, 랜덤 n개… 이런 식으로 출력해줌

# 문제2
# 비행편수(TailNum)가 20편 이상, 평균 비행거리가 2000마일 이상인 항공편의 연착시간의 평균을 구하시오. (2개 방법)

hflights %>% 
  group_by(TailNum) %>% 
  mutate(num = n()) %>%
  filter(num>=20 & mean(Distance)>=2000) %>% 
  ungroup() %>% 
  summarise(mean = mean(ArrDelay, na.rm=TRUE))

hflights %>% 
  group_by(TailNum) %>% 
  summarise(num=n(),
            dist = mean(Distance, na.rm=T),
            delay = mean(ArrDelay, na.rm=T)) %>%
  filter(num>=20, dist>=2000) %>% 
  summarise(mean = mean(delay))

# 5-1. tidyr
# 1) 데이터 정렬 형태 변경( wide <-> long )
# group_by( ) %>% summarise( )로 데이터 요약하기
aggr = delivery %>% 
  group_by(시군구,시간대,요일,업종) %>% 
  summarise(통화건수=sum(통화건수)) %>% 
  as.data.frame()   # data.frame() 안해주면 데이터프레임 형태가 아닌상태

# spread( )로 데이터를 여러 열로 나누기(long -> wide)
spread(데이터이름, 기준변수이름, 나열할 값)
aggr_wide = aggr %>% spread(업종, 통화건수) 
  : before   : after

# replace_na( )로 결측값 처리하기
replace_na(list(변수1=값, 변수2=값, ...))
aggr_wide %>% replace_na(list(족발보쌈=999, 중국음식=0, 치킨=0))
aggr_wide2 = aggr_wide %>% replace_na(list(족발보쌈=0, 중국음식=0, 치킨=0, 피자=0)) 

# drop_na( )로 결측값을 포함한 관측치 버리기
drop_na(결측값을 찾을 변수1, 변수2, ...) 
aggr_wide %>% drop_na()
aggr_wide %>% drop_na(치킨, 피자) 

# gather( )로 여러 열을 한 열 + 구분변수로 만들기(wide->long)
gather(데이터이름, 새기준변수이름, 새변수이름, 모을 변수들)
aggr_wide2 %>% gather(Category, Count, 족발보쌈, 중국음식, 피자, 치킨)
aggr_long = aggr_wide2 %>% gather(Category, Count, -(시군구:요일))
## 순서대로 시군구부터 요일까지를 뺀 나머지 변수를 선택

# complete( )로 빠져있는 조합 채우기
nrow(aggr_wide2)
# 위 코드 실행하면 3947 나옴. 원래는 4200 = 25(시군구)*24(시간대)*7(요일) 되어야.
aggr_wide2 %>% complete(시군구, 시간대, 요일)
# 위 코드 실행하면 빈칸 NA로 채워져서 총 4200 row가 됨

# fill= 옵션으로 빈값 채우기                           
aggr_wide2 %>% complete(시군구, 시간대, 요일, fill=list(족발보쌈=0, 중국음식=0, 치킨=0, 피자=0)) 

# 실습 : 서울시 지하철 이용데이터 (출처 : 공공데이터포털(www.data.go.kr))
# 데이터 불러오기 
library(openxlsx)
subway_2017 = read.xlsx('subway_1701_1709.xlsx')
subway_2017

# 데이터의 구조 확인
str(subway_2017)

# 첫 10개 관측치만 확인
head(subway_2017, n=10)

# 변수이름 확인 ->이름변환
names(subway_2017)
names(subway_2017)[6:25]
substr(names(subway_2017)[6:25], 1, 2)
paste0('H', substr(names(subway_2017)[6:25], 1, 2))
names(subway_2017)[6:25] <- paste0('H', substr(names(subway_2017)[6:25], 1, 2))

# 연습문제
# 문제1 gather( ) 함수를 활용하여 H05부터 H24까지 변수를 모아 '시간대'와 '승객수'으로 구분하는 데이터 subway2 만들기
subway2 = NA
subway2 <- subway_2017 %>% 
  gather(시간대, 승객수, H05:H24)

# 문제2 위에서 만든 subway2 데이터와 dplyr 패키지를 활용하여 역명/시간대별 전체 승객수 합계 계산 (승객수 합계의 내림차순으로 정렬)
subway2 %>% 
  group_by(역명, 시간대) %>% 
  summarise(승객수=sum(승객수)) %>% 
  arrange(desc(승객수))

# 문제3 위의 결과를 spread( ) 함수를 활용해서 시간대 펼쳐 보는 표 형태로 변환 
subway3<-subway2 %>%
  group_by(역명, 시간대) %>%
  summarise(승객수=sum(승객수)) %>%
  spread(시간대, 승객수)

# 문제4 역명/시간대/구분별 전체 승객수 합계 계산
subway2 %>%
  group_by(역명, 시간대, 구분) %>% 
  summarise(승객수=sum(승객수)) %>% 
  arrange(desc(승객수))

# 문제5 2월 한달간 역명/시간대/구분별 전체 승객수 합계 계산
subway2 %>%
  filter(월==2) %>%
  group_by(역명, 시간대, 구분) %>% 
  summarise(승객수=sum(승객수)) %>% 
  arrange(desc(승객수))

# 문자열 다루기
# 사용 라이브러리 : library(stringr)

# 패턴찾기
x <- c("apple", "banana", "pear")

str_detect(x, "e")
# 데이터가 패턴을 포함하는지 여부 T/F로 리턴

str_count(x,"e")
# 데이터가 패턴을 몇 개 포함하는지 숫자로 리턴

str_which(x,"e")
# 데이터 리스트에서 몇 번째 원소가 패턴을 포함하는지 인덱스 리턴

str_locate(x,"a")
# 데이터 리스트의 각 원소별로 패턴을 포함하는 위치를 찾아줌 (start, end) 	 

# 부분집합 찾기
x <- c("Apple", "Banana", "Pear")

str_sub(x, 1, 3)
-> 1~3번째 글자 리턴
str_sub(x, -3, -1) 
-> 뒤에서부터 3~1번째 글자 리턴
substr(x,1,3)
-> 같은 기능하는 R 내장함수
 (str_sub은 패키지 함수)
str_subset(x,"r")
  -> r을 포함한 원소 리턴	 
- 문자열 변형 : 불용어 처리시 많이 사용 (ex. '쩐다'라는 단어를 다 지우고 싶을때)
str_replace("apple","p","l") 
-> 처음 찾은 값만 바뀜
str_replace_all("apple","p","l") 
-> 찾은 모든 값 바뀜

str_to_lower("STRING") #소문자로
str_to_upper("string") #대문자로
str_to_title("string") #첫 글자만
-> 대소문자에 따라 group_by가 다르게 됨	 

연습문제
문제 1 words를 모두 대문자로 바꾼 상태에서 'AB'를 포함한 단어의 개수는 총 몇 개이며 어떤 단어들이 있는가?
sum(str_detect(str_to_upper(words), "AB"))

str_subset(str_to_upper(words), "AB")
str_to_upper(words)[str_which(str_to_upper(words),"AB")]

문제 2 words에서 "b"를 "a"로 모두 바꾸고 "aa"를 포함하는 단어 개수 확인
sum(str_detect(str_replace_all(words, "b", "a"), "aa"))

문제 3 # words에서 "e"의 수 전체 합과 평균은 몇인가?
(평균은 한 단어당 포함된 e의 개수)
sum(str_count(words, "e"))
mean(str_count(words, "e"))

# 타입 변환
as.factor(x) : 주어진 객체 x를 팩터로 변환
as.numeric(x) : 주어진 객체 x를 숫자를 저장한 벡터로 변환
as.character(x) : 주어진 객체 x를 문자열을 저장한 벡터로 변환
as.matrix(x) : 주어진 객체 x를 행렬로 변환
as.data.frame(x) : 주어진 객체 x를 데이터 프레임으로 변환
x <- c("a", "b", "c")
as.factor(x)
as.character(as.factor(x))

x <- matrix(1:9, ncol=3)
as.data.frame(x)
   # 데이터프레임은 변수명이 없을수 없음
(자동으로 V1, V2, V3할당)
# 매트릭스는 없을때도 있음	 

5-2. lubridate로 날짜 데이터 다루기
- 사용 라이브러리 : library(lubridate)

# 기본적으로 일반 텍스트 데이터를 날짜 데이터로 바꿈
as.Date('2020-01-01')

# 아래 세개는 오류난다. 입력값이 텍스트여야 하고, 표준서식을 따라야 함
as.Date(2020-01-01)
as.Date(20200101)
as.Date('20200101')

# ymd() 함수는 어떤 모양이든 이를 날짜로 인식!
ymd('20200110')
mdy('January 10th 2020')
dmy('10-jan-2020')
ymd('820327')
ymd(820327)	 

# 날짜 데이터 뽑아내기
date_test <- ymd(191020)

year(date_test)
month(date_test)
day(date_test)
week(date_test) #연도 기준 몇주차인지
wday(date_test)
wday(date_test,label = T)	 

# 날짜로 각종 계산하기
date_test + days(100)     #100일 후
date_test + months(100) #100개월 후
date_test + years(100)    #100일 후

today()
today()-date_test
	
# 날짜와 시간 데이터
ymd_hm(20-10-20 14:30)   #오류남(따옴표없음)

date_test2 <- ymd_hm("20-10-20 14:30")
hour(date_test2)
minute(date_test2)
second(date_test2)	 

# 연습문제
head(subway_2017)
summary(subway_2017$날짜)
min(subway_2017$날짜)

# 문제1 gather( ) 함수를 활용하여 H05부터 H24까지 변수를 모아 '시간대'와 '승객수'으로 구분하는 데이터 subway2 만들고, 데이터의 날짜 컬럼에 시간 추가하기 ex) "2017-01-02 06:00:00"

# 방법1
subway2<-subway_2017 %>% 
  gather('시간대', '승객수', H05:H24) %>% 
  mutate(날짜 = ymd_h(paste0(날짜, substr(subway2$시간대, 2,3))))

# 방법2
subway2 <- gather(subway_2017,"시간","고객",H05:H24)
ymd_h(paste0(subway_2017$날짜,substr(subway2$시간대,2,3)))

# 문제2 subway_2017 데이터에서 월과 일을 month, day 변수명으로 추가하기
subway_2017<-subway_2017 %>% 
  mutate(month = month(ymd(날짜)), day = day(ymd(날짜)))

# 문제3 위에서 추가한 변수들 기반으로 3월중 가장 많이 탑승한 시간은 몇시인가?
a<-subway_2017 %>%
  filter(month == 3) %>%
  select(H06:H24) %>%
  apply(2,sum) %>%
  data.frame()

colnames(a)<-c('Passenger')
a %>% 
  arrange(desc(Passenger))

# 5-3. Delete NA 결측치 처리
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
                      score = c(5, 4, 3, 4, NA))
is.na(df)
table(is.na(df))
table(is.na(df$sex))
	 
# chr로 되어 있는 컬럼의 NA값은 카운트가 안됨 -> factor로 변환해주면 됨
summary(df)
str(df)

df$sex<-as.factor(df$sex)

# apply, sapply로 NA값의 개수 구하기
apply(X = df, MARGIN = 2, FUN = function(x){sum(is.na(x))})
sapply(X = df, FUN = function(x){sum(is.na(x))})
	 

# 결측치 제거
df %>% filter(is.na(score))
df %>% filter(!is.na(score)) 
df %>% filter(!is.na(score) & !is.na(sex))

# 모든 변수에 결측치 없는 데이터 추출
df_nomiss2 <- na.omit(df)
	 
# 결측치 대체
df$score <- ifelse(is.na(df$score), 4, df$score)
table(is.na(df$score))	   

# NA값 할당하고 해당 컬럼의 평균으로 대체하기
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(65, 124, 131, 153, 212), "hwy"]
apply(mpg,2,function(x){sum(is.na(x))})
 
mpg[is.na(mpg$hwy),"hwy"] <- mean(mpg$hwy,na.rm = T)
- 앞이나 뒤에 오는 값으로 결측치 채우기
library(zoo)

#왼쪽에서 오른쪽으로 가면서 
na.locf0(c(NA, NA, "A", NA, "B"), fromLast = FALSE) 

#오른쪽에서 왼쪽으로 오면서
na.locf0(c(NA, NA, "A", NA, "B"), fromLast = TRUE) 
 
# 연습문제
data(airquality)
head(airquality)
summary(airquality)

# 1. airquality 데이터의 결측치 개수를 구하시오 (열별로)
# 방법1
apply(airquality, 2, function(x){sum(is.na(x))})
apply(X = airquality, MARGIN = 2, FUN = function(x){sum(is.na(x))})
sapply(airquality, function(x) {sum(is.na(x))})

# 방법2
colSums(is.na(airquality))
 
# 2. 결측치가 있는 행들을 제거한 후 각 열의 평균을 구하시오
a<-na.omit(airquality)
apply(a, 2, function(x) {mean(x)})
 
# 3. 결측치는 변수의 중앙값으로 대체후 각 열의 평균을 출력하시오
# NA값이 있으면 sum, mean 등 함수 적용시 결과도 NA로 나옴. na.rm=T를 꼭 붙여줘야 한다!

airquality[is.na(airquality$Ozone),"Ozone"]<-median(airquality$Ozone, na.rm=T) 
airquality[is.na(airquality$Solar.R), "Solar.R"]<- median(airquality$Solar.R, na.rm=T)

apply(airquality, 2, mean)
